var Promise = require('bluebird')
var Batch = require('batch')

var log = require('./logger').create('launcher')

var baseDecorator = require('./launchers/base').decoratorFactory
var captureTimeoutDecorator = require('./launchers/capture_timeout').decoratorFactory
var retryDecorator = require('./launchers/retry').decoratorFactory
var processDecorator = require('./launchers/process').decoratorFactory

// TODO(vojta): remove once nobody uses it
var baseBrowserDecoratorFactory = function (baseLauncherDecorator, captureTimeoutLauncherDecorator,
  retryLauncherDecorator, processLauncherDecorator) {
  return function (launcher) {
    baseLauncherDecorator(launcher)
    captureTimeoutLauncherDecorator(launcher)
    retryLauncherDecorator(launcher)
    processLauncherDecorator(launcher)
  }
}

var Launcher = function (emitter, injector) {
  var browsers = []
  var lastStartTime

  var getBrowserById = function (id) {
    for (var i = 0; i < browsers.length; i++) {
      if (browsers[i].id === id) {
        return browsers[i]
      }
    }

    return null
  }

  this.launch = function (names, protocol, hostname, port, urlRoot, concurrency) {
    var url = protocol + '//' + hostname + ':' + port + urlRoot
    var batch = new Batch()
    batch.concurrency(concurrency)

    lastStartTime = Date.now()

    names.forEach(function (name) {
      var locals = {
        id: ['value', Launcher.generateId()],
        name: ['value', name],
        baseLauncherDecorator: ['factory', baseDecorator],
        captureTimeoutLauncherDecorator: ['factory', captureTimeoutDecorator],
        retryLauncherDecorator: ['factory', retryDecorator],
        processLauncherDecorator: ['factory', processDecorator],
        baseBrowserDecorator: ['factory', baseBrowserDecoratorFactory]
      }

      // TODO(vojta): determine script from name
      if (name.indexOf('/') !== -1) {
        name = 'Script'
      }

      try {
        var browser = injector.createChild([locals], ['launcher:' + name]).get('launcher:' + name)
      } catch (e) {
       